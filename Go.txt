Características de Go:

Diseñado por Google
    Compilado
    Fuertemente tipado
    Concurrencia
¿Quien lo usa?
    Google
    Netflix
    Twitter
    Mercado Libre
    Dropbox
    Alibaba
    Proyectos hechos en Go
    Docker
    Terraform
    Kubernetes



///// Instalar Go on linux, VScode and Go extension for VScode

For online testing  play.golang.org
Download from      https://golang.org/dl/

https://github.com/golang/go/wiki/Ubuntu

Indica los siguientes comandos.
If you’re using Ubuntu LTS or 19.10 on amd64, arm64, armhf or i386, then you can use the longsleep/golang-backports PPA and install Go.

sudo add-apt-repository ppa:longsleep/golang-backports 
sudo apt update && sudo apt install golang-go



///// Comandos básicos de Go

go build filename    Compila y crea un archivo .exe (no soporta binary files)
go run filename      Compila y ejecuta, usado para pruevas
go mod               Modifica los files para wxportar nuestros codigos



///// Analizando un programa en Go

func main() {}              Es el punto de inicio de todo el código, es todo lo que se ejecuta.
package "filename"          Es la forma en la que distribuimos o almacenamos código en Go.
import                      Sirve para importar librerías necesarias para ejecutar el programa.
fmt.Println()               Se utiliza para presentar un mensaje al usuario, el mensaje se debe ubicar dentro del parentesis.

# La combinación de caracteres := le dice a Go que infiera el tipo de dato de esa variable

    a := “Hola” // var a string = "Hola"
    b:= 5 // var b int = 5

# Para indicar que una función es privada/interna se debe declarar con letra minúscula al inicio:

    private function()

# Para indicar que una función es privada se debe declarar con Letra mayúscula al inicio:

    Public function()

"defer" ejecuta un fragmento de código hasta que la función haya terminado, en otras palabras retraza el codigo para que aparezaca al final



///// Leer inputs desde la consola

   ###Creating a calculator for the terminal
   

 # Libraries, para que las librerias cargen automaticamente:
 	Settings, buscar la extension Go y marcar la opcion "Autocomplete Unimported Packages"

    "bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
    
    
Lo primero que se va crear es un "scanner" para recibir los inputs del usuario. Para esto usaremos una librería llamada "bufio" y su método "NewScanner()" que genera una nueva instancia de escaneo. Este escaneo puede ser desde diferentes inputs de entrada, en este caso le pasaremos como parámetro os.Stdin para que funcione con los inputs de la terminal.

  scanner := bufio.NewScanner(os.Stdin)

# Para que la terminal funcione necesitamos un par de funciones más:
  
  scanner.Scan()                 recibe y guarda en la instancia del escáner el texto escrito en la terminal hasta un Enter.
  operation := scanner.Text()    extrae el texto del escáner y lo podemos asignar a alguna variable.

# El siguiente paso es extraer los valores y la operación que se está realizando. Para esto usamos la función split perteneciente al paquete strings. Lo que hace es   partir un string por medio de un caracter definido como el “separador”.

  values := strings.Split()     regresa un array, por lo que una vez en nuestras variables podemos acceder a sus valores por medio de sus índices. De igual forma, 
                                la función únicamente hace la partición del string original, mas no su valor numérico. Hay que hacer un casting o transformación    
                                utilizando la función Atoi perteneciente al paquete strconv que convierte un valor string a entero.

# Otra peculiaridad de Go es que las funciones pueden regresar más de un solo valor, como es el caso de strconv.Atoi(). Esta función a su vez regresa un error si algo sale mal, sin embargo, podemos utilizar guión bajo _ para omitir el uso de la variable.

  operator1, _ := strconv.Atoi()

# Luego le indicamos al codigo que realizaremos la operacion al combinar nuestros valores

  fmt.Println(operator1 + operator2)





