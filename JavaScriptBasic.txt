
///// Que es?

¿Cómo nace Javascript?
Nace con la necesidad de generar dinamismo en las páginas web y que a su vez los usuarios y las empresas pudieran interactuar unos con otros.
¿Qué es Javascript?
Es un lenguaje interpretado, orientado a objetos, débilmente tipado y dinámico.
Débilmente tipado
Se pueden hacer operaciones entre tipos distintos de datos (enteros con strings, booleanos con enteros, etc). Ejemplo:

4 + "7"; // 47
4 * "7"; // 28
2 + true; // 3
false - 3; // -3

Dinámico
Corre directamente en la etapa de Runetime sin una etapa de compilación previa. Esto permite probar nuestro código inmediatamente; pero también es lo que hace que los errores se muestren hasta que se ejecuta el programa.
¿Realmente es Javascript un lenguaje interpretado?
Si, y la razón es que le navegador lee linea por linea nuestro código el cuál le indica lo que tiene que hacer, sin la necesidad de compilar. Todo esto es controlado por el motor de Javascript V8 del navegador
Javascript es Basckwards Compatible
Todas las funciones nuevas que salen de Javascript no dañarán el trabajo ya hecho, pero no se podrá utilizar en nuestro entorno de trabajo inmediatamente. Para solucionar esto está Babel que permite utilizar las nuevas características del lenguaje pero lo transforma a una versión que el navegador pueda entender.




///// ¿Por qué JavaScript?

1.- JavaScript tiene una comunidad enorme de desarrolladores que te pueden ir ayudando a generar diferentes cosas.

    Si solo estuvieras interesado en trabajar aplicaciones web tienes muchos frameworks y librerías construidas en JavaScript que te van a ayudar a hacer proyectos de forma mucho mas rápida, eficiente y robusta (Angular, View, React,entre otros)

    Si no quieres trabajar solo en aplicaciones Web puedes utilizar JavaScript con un framework que se llama React Native para poder construir aplicaciones nativas como Android y IOS.

    Puedes construir aplicaciones de escritorio con JavaScript, usando un framework llamado Electron, pueden correr en Mac o Windows.

    También puedes trabajar en la parte del Back-end o **IOT **(Internet Od Things) es un concepto que se refiere a una interconexion digital de objetos cotidianos con Internet. Esto con un Framework llamado NodeJS, el cual es un entorno de ejecución de JavaScript que corre directamente en el Back-end.


true   valida una operacion
false  niega una operacion

#valores primitivos:

null   valor vacio, de reemplazo
undefined   valor vacio, evitar uso

[];    valor tipo array
{};    valor tipo objeto




///// Variables

Dentro de JavaScript tenemos tres formas de declarar una variable las cuales son: var, const y let.

    Var: Era la forma en que se declaraban las variables hasta ECMAScript 5. Casi ya no se usa porque es de forma global y tiene las siguientes características:

    o Se puede reinicializar: osea todas las variables se inicializan, por ejemplo:
    Var pokemonType = ‘electric’ entonces reinicializar es:
    Var pokemonType = ‘grass’ osea la misma variable con diferentes datos el último dato predomina.
    o Se puede reasignar: osea la variable ya inicializada le reasignamos otro valor por ejemplo: inicializamos la variable: Var pokemonType = ‘electric’ ahora la reasignamos pokemonType = ‘grass’ ya no va var
    o Su alcance es función global: osea inicializamos la variable, pero la podemos llamar desde cualquier bloque (una llave abierta y una cerrada {}) pero hay que tener mucho cuidado con ello ya que puede haber peligro, no es recomendable usar VAR.

    const y let es la forma en que se declaran las variables a partir de ECMAScript 6,

    const: sirve para declarar variables que nunca van a ser modificadas:
    o No se puede reinicilizar: es una const única no puede haber otra inicializada con el mismo nombre. const pokemonType = ‘electric’ no puede haber:
    const pokemonType = ‘grass’
    o No se pude re asignar: una vez que la hayamos inicializado no la podemos reasignar solo con su nombre: const pokemonType = ‘electric’ no puede ejecutarse:
    pokemonType = ‘grass’
    o No es inmutable: osea no puede cambiar con objetos:

    Let: Son variables que pueden ser modificadas, se pueden cambiar:
    o No se puede reinicilizar: es una const única no puede haber otra inicializada con el mismo nombre. let pokemonType = ‘electric’ no puede haber:
    let pokemonType = ‘grass’
    o Se puede reasignar: Osea la variable ya inicializada le reasignamos otro valor por ejemplo: inicializamos la variable: let pokemonType = ‘electric’ ahora la reasignamos pokemonType = ‘grass’
    o Su contexto de es bloque: Solo funciona dentro de un bloque {}, fuera de ello no.





///// Topos de Funciones


Funciones declarativas

#En las funciones declarativas, utilizamos la palabra reservada function al inicio para poder    declarar la función:

    function joder()
    {
     return 3;
    }
    
    Para llamar la funcion:

    joder();
    

Funciones de expresion    
#En la expresión de función, la declaración se inicia con la palabra reservada var, donde se generará una variable que guardará un función anónima.
#En la expresión de función, la función podría o no llevar nombre, aunque es más común que se hagan anónimas.

    var joder = function(a,b)
    {
     return a + b;
    }
Para llamar la funcion:

    joder();


Para monitorear multiples datos en el code:

    function joder(marron)
    {
     console.log('Hello ${marron}');  //Esta composicion llamaria todos los datos dentro de joder
     return 3;
    }
    

function sum(a,b){
  var result = a + b;  #Se guardara el valor de la suma en la variable result
    return result;}

sum(3,5);


function sum(a,b){
    return a + b;}     #No se guardara el valor ya que ninguna variable fue declarada

sum(3,5);




///// Coerción

Coerción es la forma en la que podemos cambiar un tipo de valor a otro, existen dos tipos de coerción:
Coerción implícita = es cuando el lenguaje nos ayuda a cambiar el tipo de valor.
Coerción explicita = es cuando obligamos a que cambie el tipo de valor.

var a = 20;
var b = a + "";
console.log(b);
typeof b  //"string"
var c = String(a);   # String(); forza/convierte un valor tipo numerico a texto(string)

typeof c  //"string"
console.log(c);
20
var d = Number(c);   # Number(); forza/convierte un valor tipo texto a numerico(Number)
typeof d  //"number"



///// Boolean, Valores: Truthy y Falsy


//Ejemplos en los que Boolean devuelve Falso:
Boolean(0); //false
Boolean(null); //false
Boolean(NaN); //false
Boolean(undefined); //false
Boolean(false); //false
Boolean(""); //false

//Ejemplos en los que Boolean devuelve verdadero:
Boolean(1); //true para 1 o cualquier número diferente de cero (0)
Boolean(-1); //true para -1 o cualquier número diferente de cero (0)
Boolean("a"); //true para cualquier caracter o espacio en blanco en el string
Boolean([]); //true aunque el array esté vacío
Boolean({}); //true aunque el objeto esté vacío
Boolean(function(){}); //Cualquier función es verdadera también




///// Operadores: Asignación, Comparación y Aritméticos.


# Operador de asignacion
Simbolo 	Descripcion
= 	operador de asignacion


# Operadores de comparacion

== 	igual que (validacion flexible)  True: 3 == "3"   False: 3 == 7
=== 	estrictamente igual que, True: 3 === 3   False: 3 === "3"
> or >= or >== 	mayor o mayor igual que
< or <= or <== 	menor o menor igual que
!= or !== 	diferente que


# Operadores aritmeticos

+ 	operador suma este se utiliza para concatener dos cadenas de texto.
- 	operador resta
* 	operador de multicacion
/ 	operador de division
% 	operador de modulo
** 	operador de potenciacion

tambien se les conoce como operadores binarios. por que toman dos valores y generan un resultado.


# Operadores logicos
Simbolo 	Descripcion
! 	NOT  niega un valor
&& 	AND  Si ambas variables son iguales se valida la condición, si alguna es diferente sera falso
|| 	OR   Aquí se cumple la condición si alguna de las dos variables es verdadera


# Operadores de incremento

var edad = 40
edad++     //Incrementa el valor de la base en 1

edad += 2  //Incrementa el valor por 2, edad = 40 + 2 = 42
edad -= 5  //Causa un efecto de resta por el valor de 5, edad = 40 - 5 = 35



///// Array


Un Array es un tipo de estructura de datos, objeto. Puede guardar datos distintos dentro, guarda los datos en forma de lista.
 
 Create Array:
    var fruits = ["apple", "peach", "lychee"];
 # How to check the Array:
    type the var name for the array: fruits
    
.lenght       devuelve la longitud del array en un valor numerico.
    console.log(fruits.length);
    
.push()       agrega elementos al final de array.
    var morefin = fruits.push("grape");

.pop()        elimina un elemento del array.
    var removefin = fruits.pop("grape");

.unshift()    agrega un elemento al array, y lo coloca al inicio del array.
    var moreini = fruits.unshift("grapes");
  
.shift()      elimina el elemento que está en el inicio del array.
    var removeini = fruits.shift("grapes");
    
.indexOf      devuelve la posición de un elemento del array.
    var position = fruits.indexOf("lychee");
 # How to check the position of an item inside the array:
    type the var name for the for the command: position


///// Loops: For y For...of


Los bucles pueden ejecutar un bloque de código varias veces. JavaScript admite diferentes tipos de bucles:

    for      recorre un bloque de código varias veces

    for/in   recorre las propiedades de un objeto

    for/of   recorre los valores de un objeto iterable

    while    recorre un bloque de código mientras se cumple una condición específica

    do/while  también recorre un bloque de código mientras se cumple una condición específica












