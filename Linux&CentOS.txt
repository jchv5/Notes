
///// Comandos para files

ls usr/bin =          binarios ejecutables del sistema.
ls usr/bin | wc -l =  muestra el numero de binarios ejecutables.
pwd =                 te muestra la ruta actual.
control + l =         limpia la consola de linux.
cd nombre-carpeta =   ingresa a una carpeta.
cd .. =               sale de una carpeta.
ls -lh =              mustra el tipo de archivo, fecha, y el peso en B,G,k.
ls -lha =             muestra los archivos ocultos.
cd + tab =            auto completa las carpetas o archivos que existan.
cd ~ =                me redirije a mi ruta principal.
mkdir =               crea una nueva carpeta.
touch =               sirve para crear un archivo.
mv actual futuro =    cambia el nombre del archivo o carpeta.
rm archivo.md =       elimina un archivo sin preguntar.
rm -rf carpeta =      elimina una carpeta sin preguntar.
man comando =         muestra el manual de tal comando.
mv archivo.txt carpteta/ =          mueve el archivo a tal carpeta.
mv archivo.txt ~/desktop/carpeta =  mueve el archivo a rutas anteriores.
cp archivo ../ruta =                copia el archivo y lo pega en la ruta especificada.
pushd ~/desktop =     accede a la ruta sin necesidad de hacer un cd.
popd =                regresa a la ruta anterior en necesidad de hacer cd. referencia de pushd.
open nombre_archivo = habre el archivo
more archivo.txt =    muestra las primeras lineas del archivo.
cat > archivo.txt =   sirve para pegar o agregar informacion. termina con control+c.
tail archivo.txt =    muestra las ultimas 10 lineas.
vim archivo.ext =     habre un editor de texto, presione "i" para escribir, presione "esc" y ":wq" para guardar y ":q!" para salir.
more > archivo.txt =  muestra una parte del archivo.
echo $PATH =          mustra todas las rutas de los programa que tienen permisos.
alias ver='ls' =      crea un sobrenombre del comando.
control + r =         busca comandos ejecutados anteriormente.
top =                 muestra todo el proceso que correr el ordenador.
grep palabra file.extencion =       busca palabras claves en archivos.
grep -r . =           muestra los archivos y los contenidos de esos archivos.
grep -r               carpeta -e palabra = busca la palabra dentro de la carpeta asignada.
grep -n -r carpeta -e palabra =     busca y muestra el numero de lineas del archivo.
ls *extencion txt,jpg,mp3 =         lista los archivos que contenga la extencion escrita.
find . -type d | wc -l =            muestra el numero de directorio que existan.
curl direccion de internet =        muestra el archivo con el que esta escrito la pagina.
wget direccion de internet =        util para descargar archivos.
gig direccion de internet =         util para saber la ip de ese sitio.
tree =                              muestra el arbol de directorios.
gzip file.extension =               comprime el archivo.
gzip -d file.extension =            descomprime el archivo.
zip nombre.zip *extencion =         comprime los archivos con esas extenciones en zip.
tar cfz nombre.tar.gz *extencion =  comprime los archivos con esa extencion.
tar xfz varios.tar.gz =             descomprime  el archivo tar.
tar cf name.extension carpeta/* =   empaqueta todo los archivos de la carpeta.
tar tf name.tar =                   ve el contenido del empaquetado.
tar xf name.tar =                   desempaqueta el tar.
cat archivo.txt =                   imprime el contenido del archivo.
ls | wc -l =                        muestra en general la cantidad de contenido que existe.
whoami =                            muestra con que usuarios estas logueado.
locate name.extension =             busca el archivo y muestra su ruta.
sudo updatedb =                     actualiza la base de datos.
ssh-keygen -t rsa -b 4096 =         sirve para crear llaves ssh de privadas y publicas. 
ssh 45.55.62.127@root =             se conecta a un servidor remoto mediante ip.
ping direccion_id =                 muestra las respuesta activa del servidor.
echo "title" | mail -s "contenido" direccion de correo =    envia un email.
nl archivo.txt =                    enumera las lineas de un archivo.
wc -l archivo.txt =                 muestra el numero de lineas que tenga.
wc -w archivo.txt =                 muestra el numero de palabras.
wc -m archivo.txt =                 muestra el numero de letras o caracteres.
sed 's/mi palabra/sustitucion/g' archivo.txt =        sustituye la palabra asignada por la palabra especificada. "g" significa global.
sed -i 's/palabra/sustitucion/g' archivo.txt =        sustituye la palabra asignada y guarda el archivo con los cambios.
sed -i.orig 's/palabra/sustitucion/g' archivo.txt =   sustituye la palabra asignada y guarda el archivo con los cambios en una copia aparte.
sleep 5 && cat archivo.txt =                          simula la ejecucion de algo por 5 segundos luego ejecuta el seguiente comando.
df -h =               muestra el sistema de fichero como nombre, tamaño, ruta.
df -h --total =       mustra el sistema de fichero con calculos totales.

					USUARIOS Y GRUPOS
sudo su - =           sirve para cambiar de mi usuario a root es decir a superUsuario administrador.
sudo su usuario =     sirve para cambiar de usuarios.
adduser usuario =     sirve para crear un usuario. (solo funciona en root).
control + d =         para cerrar session.
deluser usuario =     elimina un usuario.
passwd mejorandola =  sirve para cambiar la contraseña.

sudo su            Este comando en Ubuntu es para pasarte a usuario root desde un usuario cualquiera
su - 'username'    Este comando te sacara del root user, y te llevara al user ingresado


///// Comandos para lectura

cat
    Recomendado para leer archivos pequeños.
cat /var/log/auth.log 

less
    Recomendado para leer archivos largos.
less /var/log/auth.log

head
    Muestra las ultimas 10 lineas de un archivo.
head /var/log/auth.log (con modificador head -n + el numero de lineas deseadas)

tail
    Muestra las primeras 10 lineas de un archivo.
tail /var/log/auth.log (con modificador tail -n + el numero de lineas deseadas)

Seguimiento en tiempo real para el login session mediante el comando:
    tail -f /var/log/auth.log
    
    
    
///// Interacción con archivos y permisos
  
  Identificar los archivos basándonos en el primer carácter:
-: Es un archivo.
d: es un directorio.
l: enlace simbólico.

Todo en Linux se considera un archivo.

Seguido del primer carácter vienen 9 caracteres, los 3 primeros son para el usuario, los siguientes 3 para el grupo y los últimos 3 para otros usuarios del OS:

    r: read - lectura.
    w: write - escritura.
    x: execution - ejecución.
    
    Owner - group - others
    rwx   - r-x   - --x
    
    chmod u+x +name of the file

Para cambiar permisos en el OS:
chmod
Tiene dos maneras de usarse:

    Con letras: ugoa … user, group, others, all
    chmod u+x   nombre_archivo ==> agregar un permiso.
    chmod g-w   nombre_archivo ==> quita permisos.
    chmod +x    nombre_archivo ==> quick way, asume que es para todos (a).

rwx: puede ejecutar script.
rw-: owner = cuales son los permisos.
r--: group = grupo que pertenece.
r--: anyone = que permisos tiene.
---: ni leerlo, ni escribir, ni ejecutar.


chmod = cambia los permisos;
chmod o-r file.extension =   quita el permiso de lectura de otros;
chmod g+x file.extension =   coloca el permiso de ejecucion de grupos; 

Con formato octal: son número del 0 al 7, cada letra significa algo especifico.

r = 4
w = 2
x = 1
- = 0

r--: leer 
rw-: leer y escribir 
r-x: leer y ejecutar
--x: ejecutar
-wx: escribir y ejecutar
rwx: permiso de todo

r=4, x=1, w=2

Para cambiar de Owner en el archivo:
chown ==> Change owner

chown +new user:new group +file name



///// Terminales en linux

Las distribuciones de Linux para servidores no incluyen interfaz gráfica, ya que consumen muchos recursos. Esto significa que siempre vamos a trabajar desde la terminal.

Tendremos disponibles 6 terminales virtuales a las que podemos entrar o salir con las teclas: Ctrl + Alt + Fx (osea las teclas F1-F6). 
También podemos usar el comando: chvt. La séptima terminal es la interfaz gráfica, así que en este caso no disponemos de ella.

Cada usuario activo en nuestro sistema operativo crea una nueva conexión. Podemos ver todas estas conexiones con los comandos: who y w 
(este último nos da un poco más de información).

Para ver todos los procesos que corren en el sistema podemos usar el comando ps. Para filtrar los procesos y ver únicamente las conexiones 
de los usuarios usamos el comando: ps -ft tty.

Este comando nos muestra el identificador de cada proceso. Para terminarlo podemos usar el comando: kill -9 PID



///// Monitoreo de procesos y recursos del sistema

htop ==> muestra una mejor organización de la información de los procesos del sistema

Disco duro: du . Tiene un modificador para mostrar el peso de una ruta especifica: du -hsc /home/platzi.
En ciertos casos este comando require de permisos 

cat /proc/cpuinfo | grep "processor"      Muestra información sobre el CPU
sudo ps auxf | sort -nr -k 3 | head -5    Muestra los 5 procesos que más uso hacen del CPU
sudo ps auxf | sort -nr -k 4 | head -5    Muestra los 5 procesos que más uso hacen de la memoria RAM



///// Análisis de los parámetros de red

Comandos

ifconfig    Interface Configuration, muestra las tarjetas de red que tenemos y su direccionamiento específico
ip a 	    IP Address Show, muestra las direcciones IP
hostname:   Como se identifica este equipo en la red
route -n    Muestra cual es el dispositivo que me permite conectarme a internet
nslookup    Muestra la dirección IP de un dominio determinado
curl 	    Realiza consultas a un servidor
wget 	    Permite descargar contenido de un servidor


Comandos útiles

ip -4 a   Muestra las direcciones IPv4
ip -6 a   Muestra las direcciones IPv6



///// Administración/instalacion de paquetes acorde al OS


    Red Hat / CentOS / Fedora

Repositorios: yum
Extensión de paquetes: .rpm

Comandos:

rpm -qa 	     Lista todos los rpm instalados en la máquina
rpm -i paquete.rpm   Instala un paquete
rpm -e paquete.rpm   Desinstala un paquete
yum install paquete  Instala un paquete desde un repositorio
yum search paquete   Busca un paquete en un repositorio
	    
    Debian / Ubuntu
        
Repositorios: apt
Extensión de paquetes: .deb

Comandos:

dpkg -l 	     	   Lista todos los deb instalados en la máquina
dpkg -i paquete.deb        Instala un paquete
dpkg -r paquete.deb        Desinstala un paquete
dpkg-reconfigure paquete   Permite configurar nuevamente un paquete
apt install paquete 	   Instala un paquete desde un repositorio
apt search paquete	   Busca un paquete en un repositorio




/////******Manejo de paquetes en sistemas basados en Debian******\\\\\


date 			    Imprime la fecha actual
sudo apt update   	    Actualiza la información local sobre los repositorios de Ubuntu
sudo apt upgrade  	    Actualiza todos los programas que tenemos instalados en la máquina
 
 
Otra (nueva) manera de buscar paquetes: 

snap search file name       buscar un paquete.
snap refresh --list         Para ver toda la lista de paquetes.
snap info file name         verificar la información de un paquete especifico.

sudo snap install canonical-livepatch   
Instala un paquete con el nuevo gestor de paquetes de Canonical, snap ( el key/Live patch debe ser obtenido en: https://auth.livepatch.canonical.com/?_ga=2.246540228.1309143529.1600820175-360682673.1599848663 )

apt dist-upgrade            Realiza actualizaciones a escala de kernel. Estas actualizaciones siempre requieren reinicio, a no de ser de tener Live Patch permite 			      estas actualizaciones sin tener que hacer reinicio, pide registrar hasta 3 máquinas para este proceso.
dpkg-reconfigure tzdata     Para configurar la hora del servidor
apt dist-upgrade 	    Realiza actualizaciones a escala de kernel. Estas actualizaciones siempre requieren reinicio, a no de ser de tener Live Patch permite 			      estas actualizaciones sin tener que hacer reinicio, pide registrar hasta 3 máquinas para este proceso.

apt seach paquete ó apt-cache search
Para realizar busqueda de paquetes. Para refinar la búsqueda agregar al final del nombre de paquete $, y encerrar todo el nombre del paquete entre comillas. “mysql-server$”.




///// Administración de software con YUM y RPM para CentOS


su   		        Este comando en Debian/centOS esvpara pasarte a usuario root desde un usuario cualquiera
su - 'username'         Este comando te sacara del root user, y te llevara al user ingresado

yum update     		(desde usuario root) actualizar repositorios.
rpm -e filename         Este comando sirve para el borrado de files
rpm -qa 		ver todos los paquetes instalados
rpm -qi bash   		Consultar información del paquete bash
rpm -qc bash   		Ver configuración de bash
yum install filename    Comando  utilizado para la instalacion de files
yum install net-tools:  Este paquete incluye las herramientas importantes para controlar el subsistema de red del núcleo Linux. Esto incluye arp, ifconfig, netstat, 			     rarp, nameif y route. Además, este paquete contiene utilidades relativas a tipos particulares de «hardware» de red (plipconfig, slattach, mii-			   tool) y aspectos avanzados de configuración IP (iptunnel, ipmaddr).
			Recordar que se debe tener cuidado con el tipo de enlaces que se agregan a los repositorios.



///// Nagios: Desempaquetado, descompresión, compilación e instalación de paquetes

Nagios website: https://www.nagios.org/


    *Instalar los siguientes paquetes
    
sudo apt install build-essential libgd-dev openssl libssl-dev unzip apache2 php gcc libdbi-perl libdbd-mysql-perl

    *Descargar Nagios (link directo, opcional)
   
wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.4.4.tar.gz -O nagioscore.tar.gz


    *Descomprimir y desempaquetar el archivo descargado
    
tar xvzf nagioscore.tar.gz


    *Configurar e instalar (en la carpeta donde se descomprimieron los archivos) a Nagios
    

sudo ./configure --with-https-conf=/etc/apache2/sites-enabled
sudo make all

#Si no funciona "sudo make install" continuar con los siguientes comandos y ejecutar luego "sudo make install"
sudo make install-groups-users
sudo usermod -a -G nagios www-data (no bligatorio)

sudo make install


sudo make install-init
sudo make install-commandmode
sudo make install-config
sudo make install-webconf


 # Activar el servicio de Nagios
    

sudo systemctl start nagios


 # BONUS: instalar plugins de Nagios
    

wget https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz -O nagios-plugins.tar.gz
tar xzvf nagios-plugins.tar.gz
cd nagios-plugins-2.2.1
sudo ./configure
sudo make all
sudo make install




///// Los usuarios, una tarea vital en el proceso de administración


# Comandos

id	 Muestra el identificador único de mi usuario, del grupo al que pertenezco y los grupos de los cuales formo parte
whoami   Muestra que usuario soy
passwd   Cambia la contraseña del usuario actual

# Comandos útiles

cat /etc/passwd   Muestra todos los usuarios del sistema operativo
cat /etc/shadow   Muestra las contraseñas del sistema operativo




///// Creando y manejando cuentas de usuario



    sudo useradd nombre-usuario  crea un usuario sin asignarle inmediatamente alguna contraseña ni consultar más información. Debemos terminar de configurar esta 
                                 cuenta a mano posteriormente.
    sudo adduser nombre-usuario  crea un nuevo usuario con contraseña y algo más de información. También creará una nueva carpeta en la carpeta /home/.
                                 userdel nombre-usuario: eliminar cuentas de usuarios.
    usermod: 			 modificar la información de alguna cuenta.

    cat /etc/passwd 		 Utilizado para ver los users en el sistema, nunca modificar este comando (para filtrar un user especifico usar:  | grep username)
    
    
///// Entendiendo la membresía de los grupos
    
    
su - user 	     	         Switch User, cambia de usuario
groups user	    		 Muestra a que grupos pertenece cierto usuario
sudo gpasswd -a user group       Agrega un usuario a un grupo
sudo gpasswd -d user group       Quita a un usuario de un grupo
usermod -aG user group           Agrega un usuario a un grupo
sudo -l				 Muestra que permisos tiene el usuario actual
    


///// Usando PAM para el control de acceso de usuarios


# Comandos

pwscore   	    Evalúa si una contraseña es buena o mala del 0 al 100
ulimit   	    Muestra los permisos que tiene el usuario actual. 
ulimit -u numero    Cambia la cantidad de procesos que mi usuario puede ejecutar
sudo apt libpwquality-tools   Recuerda que para usar estos comando en sistemas basados en Ubuntu debemos instalar este paquete

# Comandos útiles

sudo vi /etc/security/time.conf   Modifica el archivo que indica en que horarios pueden conectarse ciertos usuarios




///// Arranque, detención y recarga de servicios


# Comandos

    sudo systemctl status servicename	   Estado de un servicio
    sudo systemctl enable servicename	   Habilita un servicio
    sudo systemctl disable servicename 	   Deshabilita un servicio
    sudo systemctl start servicename 	   Enciende un servicio
    sudo systemctl stop servicename 	   Apaga un servicio
    sudo systemctl restart servicename     Reinicia un servicio
    sudo systemctl list-units -t service --all    	Lista los servicios del sistema
    sudo journalctl -fu servicename 	   Muestra el log de un servicio
    sudo journalctl --disk-usage 	   Muestra cuanto pesan los logs en el sistema operativo
    sudo journalctl --list-boots 	   Muestra los booteos de la computadora
    sudo journalctl -p critic|notice|info|warning|error   Muestra mensajes de determinada categoría de nuestros logs
    sudo journalctl -o json 		   Muestra los logs en formato json


    
    
///// NGINX y Apache en Ubuntu server 
    
    Para validar los puertos que tienen un proceso activo usamos:

	sudo netstat -tulpn
    
    # Apache

Ejecuta el siguiente comando

	sudo apt install apache2

    # NGINX

Ejecuta el siguiente comando

	sudo apt install nginx nginx-extras
	

Para verificar si los servicios está corriendon se debe ejecutar los siguientes comandos:
	systemctl status apache2
	systemctl status nginx
    
    
# Si se siguió el orden de instalación, NGINX no debe estar ejecutándose, pues por defecto intentará levantarse en el puerto 80, el cual ya se encuentra ocupado por Apache, para ello cambiaremos el puerto de Apache al puerto alterno http 8080.

	sudo nano /etc/apache2/ports.conf

# A continuación tenemos que cambiar el puerto al 8080, para esto se debe cambiar la instrucción Listen 8080 dentro del documento ports.conf.

# Después abrimos nuestro archivo de configuración de Apache sudo nano /etc/apache2/sites-available/000-default.conf y cambiamos el virtualhost a 8080 
  <VirtualHost*:8080>

# Después realizamos el proceso de detener apache2 y volverlo a encender, con los siguientes comandos

	sudo systemctl restart apache2 (reset nginx as well)
	systemctl status apache2
	systemctl status nginx.    
    

Ambos sitios deberían estar activos y en ejecución.
Paso siguiente, dirígete al archivo de configuración de NGINX donde te asegurarás que exista una directiva en el location llamada proxy_pass que contenga lo siguiente:

proxy_pass http://127.0.0.1:8080;   (comando:  sudo nano /etc/nginx/sites-available/default )

	#exsiste la posibilidad de que se requiera crear un file si no hay nada en la config:
	
	File composition;
	
 server_name;

    location /{
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real - IP $remote_addr;
            proxy_set_header Host  $host;
            proxy_pass http://localhost:8080/;
    }


# Next, enable the Nginx site by running the commands below

	sudo ln -s /etc/nginx/sites-available/myproxy /etc/nginx/sites-enabled/

    
    Si por alguna razón el servidor Apache no se encuentra en la misma máquina, debemos cambiar la dirección IP y el puerto respectivo.

Apache tiene un comando para activar sitios que es a2ensite que recibe como parámetro el archivo de configuración definido en /etc/apache2/sites-available. NGINX no cuenta con este comando, motivo por el cual se tiene un enlace blando, es decir, cuando creemos un archivo de configuración en /etc/nginx/sites-available debemos ejecutar sudo ln -s /etc/nginx/sites-available/configuracion_nginx /etc/nginx/sites-enabled/

Apache también me permite deshabilitar sitios y agregar módulos

sudo a2dissite 000-default

sudo a2enmod rewrite headers env dir mime

Si queremos activar letsecrypt en NGINX, debemos agregar una línea en el .htaccess en la ruta /var/www/html/nombre_host/.htaccess. La linea es SetEnvIf X-Forwarded-Proto https


	#  LOS FILES CONFIGURABLES SE PUEDEN ENCONTRAR EN LA CARPETA ( etc/ )




///// Instalación y configuración de NGINX

	sudo apt search "nginx$"

	sudo apt update && sudo apt install nginx    ( "&&"  este modificador nos permite ejecutar 2 comandos a la vez )


	sudo netstat -tulpn	 ver servicios corriendo en puertos especificos
	
	 -tulpn       ( modificador para busquedas especificas )
	t=	TCP
	u=	UDP
	l=	LISTEN
	p=	PORT
	n=	NUMERICALLY


	curl -I localhost	  muestra info sobre los Heads que estan respondiendo al Servidor




///// NGINX Amplify: Instalación y configuración de un servidor para producción



Proceso de instalación


    # Instalar Python 2.7

sudo apt install python2.7

    # Movernos a la carpeta de Nginx

cd /etc/nginx


   # Modificar el archivo conf.d de la siguiente manera:

sudo cat > conf.d/stub_status.conf


server{
	listen 127.0.0.1:80;
	server_name 127.0.0.1;
	location /nginx_status {
		stub_status on;
		allow 127.0.0.1;
		deny all;
	}
}



    # Matar el proceso de Nginx

sudo kill -HUP `cat /var/run/nginx.pid`

    # Reiniciar y habilitar Nginx

sudo systemctl restart nginx && systemctl enable nginx

    # Logearnos en el sitio web de Nginx Amplify y seguir las instrucciones de instalación: https://amplify.nginx.com
    Iniciar el servicio de Nginx Amplify

service amplify-agent start

chmod +x install.sh  ( otorgaremos permisos al file descargado )


    # si luego de seguir los pasos indicados en el amplify site, se muestra algun error seguir estas indicaciones:
 

    1. Después de darle los permisos de ejecución al archivo "install.sh" de abre con vim o nano
    2. Se edita la linea que dice “packages_url=” se reemplaza la url de las comillas por esta:
    https://packages.amplify.nginx.com/py3/


   # Reiniciar Nginx

	sudo systemctl restart nginx    reiniciamos el servicio

	service amplify-agent start     verificamos su status




///// Monitoreo de MySQL con Nagios


   
   # Instalar MySQL Server

sudo apt install mysql-server

   # Obtener el password de MySQL

sudo vim /etc/mysql/debian.cnf

   # Iniciar sesión en MySQL

mysql -u debian-sys-maint -p

   # Asegurar el server de la base de datos

sudo mysql_secure_installation

   # Verificar que Apache esté funcionando

systemctl status apache2

   # Activar módulos rewrite y cgi

sudo a2enmod rewrite cgi

   # Reiniciar Apache

sudo systemctl restart apache2

   # Crear un usuario para Nagios

sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin 

   # Entrar a Nagios en nuestro navegador web, escribiendo como dirección:

direccion_ip_del_servidor:8080/nagios

Es muy importante notar que estamos ingresando en el puerto 8080, ya que ahí es donde está funcionando Apache


  #  Instalar las siguientes dependencias:

sudo apt install -y libmcrypt-dev make libssl-dev bc gawk dc build-essential snmp libnet-snmp-perl gettext

   # Si no instalaste los plugins en las clases anteriores, debes hacer lo siguiente: en primer lugar, posicionado en tu home, descargarlos

wget https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz -0 plugins.tar.gz -O plugins.tar.gz

   # Desempaquetar y descomprimir el archivo de plugins

tar xzvf plugins.tar.gz

   # Ya en la carpeta de plugins que se creo con el paso anterior, configurar los mismos

sudo ./config

   # Verificar que no existan errores ni warnings

sudo /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg

   # Reiniciar Nagios

sudo systemctl restart nagios

   # En nuestro home, descargar el plugin de MySQL

wget https://labs.consol.de/assets/downloads/nagios/check_mysql_health-2.2.2.tar.gz -O mysqlplugin.tar.gz

   # Desempaquetar y descomprimir el archivo del plugin

tar xzvf mysqlplugin.tar.gz
 
    
    
 ///// Configuración de Nagios y MySQL
 
 
 Instrucciones

Instalar los plugins de MySQL

sudo ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl
sudo make all
sudo make install
sudo systemctl restart mysql
sudo systemctl restart nagios

   # Ya en la consola de MySQL, crear un usuario (MySQL 8)

CREATE USER 'nagtest'@'localhost' IDENTIFIED BY 'nagiosplatziS14*';   Creando un user 
DROP USER 'nagtest'@'localhost';    				      Borrado de un user
SELECT user,host FROM mysql.user;				      Muestra los users en el database


   # Configurar Nagios

sudo vim /usr/local/nagios/etc/nagios.cfg

  # Ya dentro del archivo, agregar la siguiente linea:

cfg_file=/usr/local/nagios/etc/objects/mysqlmonitoring.cfg

    Crear comandos para hacer uso de Nagios

sudo vim /usr/local/nagios/etc/objects/commands.cfg

#Ya dentro del archivo, agregar las siguientes líneas:

define command {
	command_name check_mysql_health
	command_line $USER1$/check_mysql_health -H $ARG4$ --username $ARG1$ --password $ARG2$ --port $ARG5$  --mode $ARG3$
}

    Crear el archivo que nombrarmos en la configuración en el archivo nagios.cfg

sudo vim /usr/local/nagios/etc/objects/mysqlmonitoring.cfg

#Ya en el archivo, agregar las siguientes líneas

define service {
	use local-service
	host_name localhost
	service_description MySQL connection-time
	check_command check_mysql_health!nagtest!nagiosplatziS14*!connection-time!127.0.0.1!3306!
}

OJO! En la clase hay un pequeño typo, como puede verse arriba, la directiva correcta es host_name y no hostname, les va a dar error si lo ponen de esta última forma

    Reiniciar nagios

sudo systemctl restart nagios

    
    
 ///// Otros servicios de logs


Aclaración: Un demonio es sinónimo de servicio en sistemas UNIX

   # Collectd: Uno de los demonios más conocidos para recopilar datos de rendimiento y visualizarlos en un navegador. Está repleto de plugins: https://collectd.org  	  /wiki/index.php/Table_of_Plugins
   # Nmon: Sirve para obtener visualizaciones rápidas del sistema
   # Munin Analiza el rendimiento del servidor, y muestra los resultados en gráficos históricos
   # Grafana: Permite la visualización de datos métricos de nuestro servidor, además de la creación de cuadros de mando y gráficos
   
    
    
 ///// Las bases de bash

¿Qué es Bash? Es una shell de UNIX y el intérprete de comandos por defecto en la mayoría de distribuciónes GNU/Linux. Se pueden crear scripts, los cuales por convención terminan con la extensión .sh

# Creamos el file con el siguiente comando:

   vim file.sh

#Dentro del file ingresamos la siguiente info:


   #!/bin/bash    		Definición de un intérprete para que lo que sigue se ejecute con Bash
   VARIABLE = "Hola mundo"      Definición de una variable
   echo $VARIABLE   		Impresión en pantalla
   # Comentario cualquiera      Creación de un comentario

 
 
 
 ///// Las variables y su entorno de ejecución
 
 
 Las variables y su entorno de ejecución

# Comandos

env: Muestra las variables del sistema operativo

# Variables de entorno

$PATH: Guarda las rutas donde se ubican los archivos binarios que pueden ejecutarse directamente en la consola

# Scripts útiles


   # Verificar la cantidad de espacio en el S.O, creamos el file usando vim y luego ingresamos la config requerida:
   
   vim script_dd.sh
   
   
   #Config:

#!/bin/bash
# Verificar la cantidad de espacio en el S.O
# Desarrollado por Jhon Edison

CWD=$(pwd)
FECHA=$(date +"%F%T")
echo $FECHA

df -h | grep /dev > uso_disco_"$FECHA".txt
df -h | grep /dev/sda2 >> uso_disco_"$FECHA".txt

echo "Se ha generado un archivo en la ubicación $CWD"


# Luego de crear el file de otorgamos permisos y lo ejecutamos:

chmod u+x script_dd.sh 
./script_dd.sh

# Bonus

ls -ltr    muestra las ultimas modificaciones hechas a los files
pwd 	   print working directory
df -h      disk free -h (human)


 
 
  ///// Automatizando tareas desde la terminal
  
 

    # Generar backup de base de datos MySQL
    
    

#!/bin/bash
# Shell script para obtener una copia desde MySQL
# Desarrollado por Johnny chv

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

set -e

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

run
make_backup

function assert_is_installed {
	local readonly name="$1"
	if [[ ! $(command -v ${name})]]; then
		log_error "The binary '$name' is required but it isn't in 		our system"
		exit 1
	fi
}

function log_error {
	local readonly message "$1"
	log "ERROR" "$message"
}

function  log {
	local readonly level="$1"
	local readonly message="$2"
	local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S") >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
		
}

function run {
	assert_is_installed "mysql"
	assert_is_installed "mysqldump"
	assert_is_installed "gzip"
	assert_is_installed "aws"
}

function make_backup {
	local BAK="$(echo $HOME/mysql)"
	local MYSQL="$(which mysql)"
	local MYSQLDUMP="$(which mysqldump)"
	local GZIP="$(which gzip)"
	local NOW="$(date +"+%d-%m-%Y")"
	local BUCKET="xxxxx"
	
	USER="xxxxxx"
	PASS="xxxxxx"
	HOST="xxxxxx"
	DATABASE="xxxxxx"

	[! -d "$BAK" ] && mkdir -p "$BAK"

	FILE=$BAK/$DATABASE.$NOW-$(date +"%T").gz
	local SECONDS=0
	
	$MYSQLDUMP --single-transaction --set-gtid-purged=OFF -u $USER -p $PASS -h $HOST $DATABASE | $GZIP -9 > $FILE

	duration=$SECONDS
	echo "$($duration / 60) minutes"
	aws s3 cp $BAK "s3://$BUCKET" --recursive
}




 ///// Crontab

¿Qué es cron?: Es un administrador regular de procesos en segundo plano que comprueba si existen tareas para ejecutar, teniendo en cuenta la hora del sistema

¿Qué es crontab?: Es el archivo de configuraciones de las tareas a ejecutar. 

	Con el comando crontab -e se edita  
	con crontab -l se listan las tareas configuradas

# Formato de cron

minute(0-59) hour(0-23) day_of_month(1-31) month(1-12|jan,feb,mar...) day_of_week(0-6|sun,mon,tue...) interpreter(ej:"/usr/bin/bash") command(ej:"pwd > /home/plazi/pwd.txt")

 Crontab website:
 https://crontab.guru/
 
 
 
 ///// Entendiendo la gestión de vulnerabilidades

  # Malas prácticas

    No desactivar el usuario root
    Realizar un login con usuario y password (sin ssh)
    No validar la versión de software usada
    Utilizar comandos r* o telnet
    No identificar los servicios y puertos abiertos en el S.O
    No gestionar correctamente los permisos de los usuarios
    
    
    #Buenas prácticas
    
    Verificar las actualizaciones de seguridad y realizar la instalación de las mismas.
    
    # En CentOS:

yum check-update --security
yum update security

    # En Ubuntu:

apt update
apt upgrade

 
 # Bonus
 
Ejecutar un sudo apt upgrade (sin validar antes que paquetes se deben repotenciar) podría hacer que nuevas versiones entren en conflicto con las aplicaciones que ya están corriendo en el servidor (p.ej. Si se llegara a cambiar un php6.x a un php7.x podría provocar una catástrofe), creo que mejor es verificar cuidadosamente (con el equipo) y ejecutar un set de pruebas para determinar que paquetes pueden ser repotenciados con upgrade:
Este comando puede listar cuales son los paquetes que ya tienen nuevas versiones disponibles en los repositorios:

	sudo apt list --upgradeable
 
 
 
 ///// ¿Qué es una superficie de ataque? Principio del menor privilegio


Una superficie de ataque es el conjunto de datos conocidos o vulnerabilidades que pueden ser explotados por un atacante informático.


Software útil para la gestión de vulnerabilidades


    Lynis: Analiza nuestro servidor y nos da recomendaciones



Manuales y frameworks útiles para la seguridad de nuestro servidor


    SCAP: El Security Content Automation Protocol es un conjunto de reglas sobre la expresión y manipulación de información relacionada con configuraciones y fallos.
    OWASP: El Open Web Application Security Project es un proyecto de código abierto destinado a pelear contra la inseguridad informática

 
 
 ///// El firewall y sus reglas


Comandos


    sudo ufw status		      Muestra el estado (activo/inactivo) y las reglas del firewall. Con el modificador numbered me muestra las reglas numeradas
    sudo ufw allow puerto: 	      Habilita un puerto
    sudo ufw enable 		      Enciende el firewall
    sudo ufw delete numero_de_regla   Borra una regla
    sudo ufw allow from direccion_ip proto protocolo to any port puerto  Restringe las direcciones ip que pueden conectarse a cierto puerto. Recordar que SSH trabaja 									       con el protocolo TCP
    sudo ufw reset 		      Elimina todas las reglas


Recomendación

Abrir al público únicamente el puerto 80 (http), 443 (https). Para un conjunto de IP’s específicas, habilitar el puerto 22 (ssh)
 
 
 
 ///// RESUMEN DE LA CLASE

Escaneo de puertos con NMAP y NIKTO desde Kali Linux

# Comandos

    nmap -sV -sC -0 -oA nombre_de_archivo dirección_ip_del_servidor: Realiza un mapeo de la red
    nikto -h ip_del_host -o nombre_de_archivo: Escanea vulnerabilidades en un servidor

 
 
/////  Lynis: Herramientas de auditoria de seguridad en Linux

# Comandos

    sudo lynis audit system: Realiza un escaneo del sistema operativo, mostrándonos sugerencias y el estado de peligro de ciertos detalles en nuestra distribución

 # Instrucciones para actualizar lynis:
	https://packages.cisofy.com/community/
 
 
 
 
 ///// Configuración de Node.js en un ambiente productivo


Instrucciones


   # Clonar el repositorio necesario para realizar la clase

git clone https://github.com/edisoncast/linux-platzi

   # Instalar Node.js y npm

sudo apt install nodejs npm

   # Posicionados en el home, descargar Node 10

curl -sL https://deb.nodesource.com/setup_10.x -o node_setup.sh

   # Instalar Node 10

sudo bash node_setup.sh

   # Instalar gcc, g++ y make

sudo apt install gcc g++ make

   # Finalizar el proceso de instalación de la versión 10 de Node

sudo apt install -y nodejs

   # Agregar el usuario nodejs si todavía no lo creaste

sudo adduser nodejs

   # En la carpeta de linux-platzi, ejecutar el archivo server.js

node server.js

   
# Crear un archivo de configuración para el servicio de Node

	sudo vim /lib/systemd/system/platzi@.service

# Una vez creado el archivo, llenarlo con la siguiente información

[Unit]
Description=Balanceo de carga para Platzi
Documentation=https://github.com/edisoncast/linux-platzi
After=network.target

[Service]
Enviroment=PORT=%i
Type=simple
User=nodejs
WorkingDirectory=/home/nodejs/linux-platzi
ExecStart=/usr/bin/node /home/nodejs/linux-platzi/server.js
Restart-on=failure

[Install]
WantedBy=multi-user.target

 
 
 
 ///// Configuración de NGINX para la aplicación de Node.js

Instrucciones


    Cambiar el usuario a nodejs

sudo su - nodejs

    # Clonar el repositorio necesario para la clase

git clone https://github.com/edisoncast/linux-platzi

    Cambiar el nombre a la carpeta de linux-platzi a server
    Corregir los errores en el archivo de configuración del servicio en /lib/systemd/system/platzi@.service
    Iniciar el servicio (debemos estar en la carpeta /server/configuracion_servidor/bash)

./enable.sh
./start.sh

    # Iniciar el servicio de Nginx (Apagar antes Apache si es necesario)

sudo systemctl start nginx

    # Una vez en la carpeta /etc/nginx/sites-available/ eliminar el contenido de la configuración de Nginx

sudo truncate -s0 default

    # Editar el archivo de configuración

sudo vim default

    # Una vez en el archivo, escribir lo siguiente

server  {
	listen 80 default_server;
	listen [::]:80 default_server;
	
	server_name _;
	
	location / {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		proxy_http_version 1.1;
		proxy_pass http://backend;
	}
}

upstream backend {
	server 127.0.0.1:3000;
	server 127.0.0.1:3001;
	server 127.0.0.1:3002;
	server 127.0.0.1:3003;
}

    # Validamos que la configuración establecida fue correcta

sudo nginx -t

    # Reiniciamos nginx

sudo systemctl restart nginx

    # Probamos todo haciendo un curl a localhost

curl localhost




 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 




    
